BCDConverter.cc:    int scanLong(const StreamFormat&, const char*, long&);
BCDConverter.cc:scanLong(const StreamFormat& fmt, const char* input, long& value)
BinaryConverter.cc:    int scanLong(const StreamFormat&, const char*, long&);
BinaryConverter.cc:scanLong(const StreamFormat& format, const char* input, long& value)
ChecksumConverter.cc:    int scanPseudo(const StreamFormat&, StreamBuffer&, long& cursor);
ChecksumConverter.cc:scanPseudo(const StreamFormat& format, StreamBuffer& input, long& cursor)
ChecksumConverter.cc:                sscanf(input(cursor+2*i), "%2X", &inchar);
ChecksumConverter.cc:                sscanf(input(cursor+2*i), "%2x", &inchar);
EnumConverter.cc:    int scanLong(const StreamFormat&, const char*, long&);
EnumConverter.cc:scanLong(const StreamFormat& fmt, const char* input, long& value)
EnumConverter.cc:    debug("StreamEnumConverter::scanLong(%%%c, \"%s\")\n",
EnumConverter.cc:        debug("StreamEnumConverter::scanLong: check #%ld \"%s\"\n", val, s);
EnumConverter.cc:            debug("StreamEnumConverter::scanLong: value %ld matches\n", val);
EnumConverter.cc:    debug("StreamEnumConverter::scanLong: no value matches\n");
RawConverter.cc:    int scanLong(const StreamFormat&, const char*, long&);
RawConverter.cc:scanLong(const StreamFormat& format, const char* input, long& value)
StreamCore.cc:                                scanLong(fmt, inputLine(consumedInput), ldummy);
StreamCore.cc:                                scanDouble(fmt, inputLine(consumedInput), ddummy);
StreamCore.cc:                                scanString(fmt, inputLine(consumedInput), NULL, 0);
StreamCore.cc:                                scanPseudo(fmt, inputLine, consumedInput);
StreamCore.cc:                            error("%s: Can't scan value with format %%%s\n",
StreamCore.cc:scanSeparator()
StreamCore.cc:scanValue(const StreamFormat& fmt, long& value)
StreamCore.cc:        error("%s: scanValue(long&) called with %%%c format\n",
StreamCore.cc:        scanLong(fmt, inputLine(consumedInput), value);
StreamCore.cc:    debug("StreamCore::scanValue(%s, format=%%%c, long) input=\"%s\"\n",
StreamCore.cc:    debug("StreamCore::scanValue(%s) scanned %li\n",
StreamCore.cc:scanValue(const StreamFormat& fmt, double& value)
StreamCore.cc:        error("%s: scanValue(double&) called with %%%c format\n",
StreamCore.cc:        scanDouble(fmt, inputLine(consumedInput), value);
StreamCore.cc:    debug("StreamCore::scanValue(%s, format=%%%c, double) input=\"%s\"\n",
StreamCore.cc:    debug("StreamCore::scanValue(%s) scanned %#g\n",
StreamCore.cc:scanValue(const StreamFormat& fmt, char* value, long maxlen)
StreamCore.cc:        error("%s: scanValue(char*) called with %%%c format\n",
StreamCore.cc:        scanString(fmt, inputLine(consumedInput), value, maxlen);
StreamCore.cc:    debug("StreamCore::scanValue(%s, format=%%%c, char*, maxlen=%ld) input=\"%s\"\n",
StreamCore.cc:    debug("StreamCore::scanValue(%s) scanned \"%s\"\n",
StreamEpics.cc:    IOSCANPVT ioscanpvt;
StreamEpics.cc:    bool scan(format_t *format, void* pvalue, size_t maxStringSize);
StreamEpics.cc:    if (!pstream->ioscanpvt)
StreamEpics.cc:        scanIoInit(&pstream->ioscanpvt);
StreamEpics.cc:    debug("streamGetIointInfo(%s,cmd=%d): pstream=%p, ioscanpvt=%p\n",
StreamEpics.cc:        record->name, cmd, pstream, pstream ? pstream->ioscanpvt : NULL);
StreamEpics.cc:    *ppvt = pstream->ioscanpvt;
StreamEpics.cc:    return pstream->scanSeparator() ? OK : ERROR;
StreamEpics.cc:    if (!pstream->scan(format, value, maxStringSize))
StreamEpics.cc:    ioscanpvt = NULL;
StreamEpics.cc:    // scan link parameters: filename protocol busname addr busparam
StreamEpics.cc:    int items = sscanf(ioLink->value.instio.string, "%79s%79s%79s%n%i%n",
StreamEpics.cc:    if (ioscanpvt)
StreamEpics.cc:        if (record->scan == SCAN_IO_EVENT)
StreamEpics.cc:    if (record->pact || record->scan == SCAN_IO_EVENT)
StreamEpics.cc:scan(format_t *format, void* value, size_t maxStringSize)
StreamEpics.cc:    // first remove old value from inputLine (if we are scanning arrays)
StreamEpics.cc:            currentValueLength = scanValue(*format->priv, *lptr);
StreamEpics.cc:            currentValueLength = scanValue(*format->priv, *dptr);
StreamEpics.cc:            currentValueLength  = scanValue(*format->priv, sptr, maxStringSize);
StreamEpics.cc:    // Don't remove scanned value from inputLine yet, because
StreamEpics.cc:            if (record->pact || record->scan == SCAN_IO_EVENT)
StreamEpics.cc:    if (record->pact || record->scan == SCAN_IO_EVENT)
StreamEpics.cc:    if (result != Abort && record->scan == SCAN_IO_EVENT)
StreamEpics.cc:                    consumed = scanValue(format, lval);
StreamEpics.cc:                    consumed = scanValue(format, lval);
StreamEpics.cc:                    consumed = scanValue(format, dval);
StreamEpics.cc:                    consumed = scanValue(format,
StreamEpics.cc:    convert = readData(record, &fmt); // this will call scan()
StreamFormatConverter.cc:scanLong(const StreamFormat& fmt, const char*, long&)
StreamFormatConverter.cc:    error("Unimplemented scanLong method for %%%c format\n",
StreamFormatConverter.cc:scanDouble(const StreamFormat& fmt, const char*, double&)
StreamFormatConverter.cc:    error("Unimplemented scanDouble method for %%%c format\n",
StreamFormatConverter.cc:scanString(const StreamFormat& fmt, const char*, char*, size_t)
StreamFormatConverter.cc:    error("Unimplemented scanString method for %%%c format\n",
StreamFormatConverter.cc:scanPseudo(const StreamFormat& fmt, StreamBuffer&, long&)
StreamFormatConverter.cc:    error("Unimplemented scanPseudo method for %%%c format\n",
StreamFormatConverter.cc:    int parse(const StreamFormat& fmt, StreamBuffer& output, const char*& value, bool scanFormat);
StreamFormatConverter.cc:    int scanLong(const StreamFormat& fmt, const char* input, long& value);
StreamFormatConverter.cc:    const char*& source, bool scanFormat)
StreamFormatConverter.cc:    if (scanFormat && (fmt.flags & alt_flag)) return false;
StreamFormatConverter.cc:    if (scanFormat) info.append("%n");
StreamFormatConverter.cc:scanLong(const StreamFormat& fmt, const char* input, long& value)
StreamFormatConverter.cc:        if (sscanf(input, fmt.info, &length) < 0) return -1;
StreamFormatConverter.cc:        if (sscanf(input, fmt.info, &value, &length) < 1) return -1;
StreamFormatConverter.cc:    virtual int scanDouble(const StreamFormat&, const char*, double&);
StreamFormatConverter.cc:    const char*& source, bool scanFormat)
StreamFormatConverter.cc:    if (scanFormat && (fmt.flags & alt_flag))
StreamFormatConverter.cc:    if (scanFormat) info.append('l');
StreamFormatConverter.cc:    if (scanFormat) info.append("%n");
StreamFormatConverter.cc:scanDouble(const StreamFormat& fmt, const char* input, double& value)
StreamFormatConverter.cc:        if (sscanf(input, fmt.info, &length) < 0) return -1;
StreamFormatConverter.cc:        if (sscanf(input, fmt.info, &value, &length) < 1) return -1;
StreamFormatConverter.cc:    virtual int scanString(const StreamFormat&, const char*, char*, size_t);
StreamFormatConverter.cc:    const char*& source, bool scanFormat)
StreamFormatConverter.cc:    if (scanFormat) info.append("%n");
StreamFormatConverter.cc:scanString(const StreamFormat& fmt, const char* input,
StreamFormatConverter.cc:        if (sscanf(input, fmt.info, &length) < 0) return -1;
StreamFormatConverter.cc:        if (sscanf(input, f, value, &length) < 1) return -1;
StreamFormatConverter.cc:        debug("StreamStdStringConverter::scanString: length=%d, value=%s\n",
StreamFormatConverter.cc:    // scanString is inherited from %s format
StreamFormatConverter.cc:    const char*& source, bool scanFormat)
StreamFormatConverter.cc:    if (scanFormat)
StreamFormatConverter.cc:    virtual int scanString(const StreamFormat&, const char*, char*, size_t);
StreamFormatConverter.cc:    const char*& source, bool scanFormat)
StreamFormatConverter.cc:    if (!scanFormat)
StreamFormatConverter.cc:scanString(const StreamFormat& fmt, const char* input,
StreamFormatConverter.cc:        if (sscanf (input, fmt.info, &length) < 0) return -1;
StreamFormatConverter.cc:        if (sscanf(input, f, value, &length) < 1) return -1;
StreamFormatConverter.cc:        debug("StreamStdCharsetConverter::scanString: length=%d, value=%s\n",
StreamProtocol.cc:                    sscanf (source, "%3o%n", &temp, &n);
StreamProtocol.cc:                    if (sscanf (source+1, "%2x%n", &temp, &n) < 1)
StreamProtocol.cc:                    sscanf (source, "%3u%n", &temp, &n);
